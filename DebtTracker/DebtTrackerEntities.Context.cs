//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DebtTracker
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DebtTrackerEntities : DbContext
    {
        public DebtTrackerEntities()
            : base("name=DebtTrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Debt> Debt { get; set; }
        public virtual DbSet<DebtTemplate> DebtTemplate { get; set; }
        public virtual DbSet<DebtType> DebtType { get; set; }
        public virtual DbSet<PaidDebts> PaidDebts { get; set; }
    
        public virtual ObjectResult<getPaidDebts_Result> getPaidDebts(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string forUser)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var forUserParameter = forUser != null ?
                new ObjectParameter("ForUser", forUser) :
                new ObjectParameter("ForUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPaidDebts_Result>("getPaidDebts", dateFromParameter, dateToParameter, forUserParameter);
        }
    
        public virtual ObjectResult<getUnpaidDebts_Result> getUnpaidDebts(string forUser)
        {
            var forUserParameter = forUser != null ?
                new ObjectParameter("ForUser", forUser) :
                new ObjectParameter("ForUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUnpaidDebts_Result>("getUnpaidDebts", forUserParameter);
        }
    
        public virtual int payUnpaid(string owner)
        {
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("payUnpaid", ownerParameter);
        }
    }
}
